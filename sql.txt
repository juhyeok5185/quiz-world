CREATE TABLE t_member (
                          member_id BIGINT NOT NULL AUTO_INCREMENT COMMENT '회원 일련번호',
                          role TINYINT(1) NOT NULL COMMENT '역할',
                          auth_id VARCHAR(255) NOT NULL COMMENT '아이디',
                          name VARCHAR(100) NOT NULL COMMENT '이름',
                          email VARCHAR(255) NOT NULL COMMENT '이메일',
                          device_token VARCHAR(100) COMMENT '디바이스 토큰',
                          use_yn TINYINT(1) NOT NULL DEFAULT 1 COMMENT '사용여부',
                          save_dtm DATETIME NOT NULL DEFAULT now() COMMENT '저장시간',
                          mod_dtm DATETIME NOT NULL DEFAULT now() COMMENT '수정시간',
                          PRIMARY KEY (member_id)
);

CREATE TABLE t_subject (
                           subject_id BIGINT NOT NULL AUTO_INCREMENT COMMENT '과목 일련번호',
                           member_id BIGINT NOT NULL COMMENT '회원 일련번호',
                           name VARCHAR(255) NOT NULL COMMENT '과목명',
                           use_yn TINYINT(1) NOT NULL DEFAULT 1 COMMENT '사용여부',
                           save_dtm DATETIME NOT NULL DEFAULT now() COMMENT '저장시간',
                           mod_dtm DATETIME NOT NULL DEFAULT now() COMMENT '수정시간',
                           PRIMARY KEY (subject_id),
                           FOREIGN KEY (member_id) REFERENCES t_member (member_id)
);

CREATE TABLE t_chapter (
                           chapter_id BIGINT NOT NULL AUTO_INCREMENT COMMENT '챕터 일련번호',
                           subject_id BIGINT NOT NULL COMMENT '과목 일련번호',
                           name VARCHAR(255) NOT NULL COMMENT '챕터명',
                           use_yn TINYINT(1) NOT NULL DEFAULT 1 COMMENT '사용여부',
                           save_dtm DATETIME NOT NULL DEFAULT now() COMMENT '저장시간',
                           mod_dtm DATETIME NOT NULL DEFAULT now() COMMENT '수정시간',
                           PRIMARY KEY (chapter_id),
                           FOREIGN KEY (subject_id) REFERENCES t_subject (subject_id)
);

CREATE TABLE t_passage (
                           passage_id BIGINT NOT NULL AUTO_INCREMENT COMMENT '지문 일련번호',
                           chapter_id BIGINT NOT NULL COMMENT '챕터 일련번호',
                           subject_id BIGINT NOT NULL COMMENT '과목 일련번호',
                           text TEXT NOT NULL COMMENT '지문 내용',
                           use_yn TINYINT(1) NOT NULL DEFAULT 1 COMMENT '사용여부',
                           save_dtm DATETIME NOT NULL DEFAULT now() COMMENT '저장시간',
                           mod_dtm DATETIME NOT NULL DEFAULT now() COMMENT '수정시간',
                           PRIMARY KEY (passage_id),
                           FOREIGN KEY (chapter_id) REFERENCES t_chapter (chapter_id),
                           FOREIGN KEY (subject_id) REFERENCES t_subject (subject_id)
);

CREATE TABLE t_question (
                            question_id BIGINT NOT NULL AUTO_INCREMENT COMMENT '퀴즈 일련번호',
                            subject_id BIGINT NOT NULL COMMENT '과목 일련번호',
                            chapter_id BIGINT NOT NULL COMMENT '챕터 일련번호',
                            passage_id BIGINT NULL COMMENT '지문 일련번호',
                            type TINYINT(1) NOT NULL COMMENT '0:주관식, 1:객관식',
                            question_text TEXT NOT NULL COMMENT '텍스트 질문',
                            use_yn TINYINT(1) NOT NULL DEFAULT 1 COMMENT '사용여부',
                            save_dtm DATETIME NOT NULL DEFAULT now() COMMENT '저장시간',
                            mod_dtm DATETIME NOT NULL DEFAULT now() COMMENT '수정시간',
                            PRIMARY KEY (question_id),
                            FOREIGN KEY (subject_id) REFERENCES t_subject (subject_id),
                            FOREIGN KEY (chapter_id) REFERENCES t_chapter (chapter_id),
                            FOREIGN KEY (passage_id) REFERENCES t_passage (passage_id)
);

CREATE TABLE t_answer (
                          answer_id BIGINT NOT NULL AUTO_INCREMENT COMMENT '주관식 답 일련번호',
                          question_id BIGINT NOT NULL COMMENT '퀴즈 일련번호',
                          answer_text TEXT NOT NULL COMMENT '텍스트 답',
                          answer_yn TINYINT(1) NOT NULL DEFAULT 0 COMMENT '정답여부',
                          use_yn TINYINT(1) NOT NULL DEFAULT 1 COMMENT '사용여부',
                          save_dtm DATETIME NOT NULL DEFAULT now() COMMENT '저장시간',
                          mod_dtm DATETIME NOT NULL DEFAULT now() COMMENT '수정시간',
                          PRIMARY KEY (answer_id),
                          FOREIGN KEY (question_id) REFERENCES t_question (question_id)
);

CREATE TABLE t_member_answer (
                               member_answer_id BIGINT NOT NULL AUTO_INCREMENT COMMENT '선택된 답 일련번호',
                               auth_id BIGINT NOT NULL COMMENT '회원 일련번호',
                               answer_id BIGINT NOT NULL COMMENT '답 일련번호',
                               question_id BIGINT NOT NULL COMMENT '퀴즈 일련번호',
                               passage_id BIGINT NOT NULL COMMENT '지문 일련번호',
                               chapter_id BIGINT NOT NULL COMMENT '챕터 일련번호',
                               subject_id BIGINT NOT NULL COMMENT '과목 일련번호',
                               text TEXT NOT NULL COMMENT '텍스트 답',
                               answer_yn TINYINT(1) NOT NULL COMMENT '정답여부',
                               use_yn TINYINT(1) NOT NULL DEFAULT 1 COMMENT '사용여부',
                               save_dtm DATETIME NOT NULL DEFAULT now() COMMENT '저장시간',
                               mod_dtm DATETIME NOT NULL DEFAULT now() COMMENT '수정시간',
                               PRIMARY KEY (member_answer_id),
                               FOREIGN KEY (auth_id) REFERENCES t_member (member_id),
                               FOREIGN KEY (answer_id) REFERENCES t_answer (answer_id),
                               FOREIGN KEY (question_id) REFERENCES t_question (question_id),
                               FOREIGN KEY (passage_id) REFERENCES t_passage (passage_id),
                               FOREIGN KEY (chapter_id) REFERENCES t_chapter (chapter_id),
                               FOREIGN KEY (subject_id) REFERENCES t_subject (subject_id)
);

CREATE TABLE t_question_keyword (
                                    question_keyword_id BIGINT NOT NULL AUTO_INCREMENT COMMENT '주관식 답 일련번호',
                                    question_id BIGINT NOT NULL COMMENT '퀴즈 일련번호',
                                    name VARCHAR(100) NOT NULL COMMENT '이름',
                                    use_yn TINYINT(1) NOT NULL DEFAULT 1 COMMENT '사용여부',
                                    save_dtm DATETIME NOT NULL DEFAULT now() COMMENT '저장시간',
                                    mod_dtm DATETIME NOT NULL DEFAULT now() COMMENT '수정시간',
                                    PRIMARY KEY (question_keyword_id),
                                    FOREIGN KEY (question_id) REFERENCES t_question (question_id)
);


1. 모놀리틱 아키텍처에서 DDD 원칙을 최대한 적용하기 위한 Facade 패턴 활용
    1) Service 계층은 조회 및 저장의 단순 업무만 수행하고, 비즈니스 로직은 Facade에서 Service를 호출하여 처리하도록 설계.
    2) 이를 통해 단일 책임 원칙(SRP)과 의존성 분리를 강화하고, 비즈니스 로직의 유지보수성을 높임.
    3) Facade에서 트랜잭션 관리를 통해 일관성 보장
    3) Reader(조회)와 Store(저장/수정) 역할을 분리하여 책임을 명확히 함.

   적용 이유 - 비지니스 로직에서 발생하는 이벤트를 facade에서 발행하도록 설계하여 향후 msa 전환시 이벤트 기반 아키텍처로의 확장성을 확보

2. Spring Security 기반 OAuth 2.0(Google 로그인) 및 CSRF 토큰(세션 기반) 적용
    1) OAuth 2.0을 활용한 Google 로그인 기능 적용
    2) CSRF(Cross-Site Request Forgery) 공격 방지를 위해 세션 기반 CSRF 토큰을 적용하여 보안 강화

3. 개인정보 보호를 위한 AES-256 암호화 적용
    1) 사용자 개인정보(예: 이메일, 전화번호 등)에 AES-256 암호화 적용
    2) DB 저장 및 전송 시 보안성을 강화하여 개인정보 유출 방지

4. Request-Response 객체 분리 및 Entity 은닉을 통한 보안 강화
    1) Entity를 직접 노출하지 않고 DTO(Request, Response) 객체를 활용하여 데이터의 캡슐화 및 보안성 향상
    2) 입력 검증 강화: @Valid와 함께 커스텀 Validator를 추가해 비즈니스 요구사항에 맞는 데이터 유효성 검사를 철저히 수행.

5. Mapper 클래스 활용
    1) DTO ↔ Entity 변환을 위해 Mapper 클래스를 사용하여 코드의 일관성과 유지보수성을 높임

6. API 응답 객체(APIResponse) 통일
    1) 모든 API 응답을 일관된 형식(APIResponse 객체)으로 {status , message , data}형식으로 반환하여 응답 구조를 통일
    2) Unchecked Exception에 대해 Custom Exception(MyException) 으로 메세지를 전달하여 응답 객채(APIResponse)와 같은 형태로 response되는 구조로 설계
        -> 추후에는 각 Exception 마다 핸들링 해야하지만 빠른 개발을 위해 채택한 구조

7. RESTful API 원칙을 준수한 Controller 설계
    1) HTTP 메서드(GET, POST, PUT, DELETE)를 RESTful 원칙에 맞게 활용
    2) REST API의 자원(Resource) 기반 설계를 따르며, 명확한 엔드포인트 구조 유지


작업예정
1. 배포 자동화 github action
2. ai 추가



